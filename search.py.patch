--- search.py.orig	2013-01-16 16:34:17.000000000 -0500
+++ search.py	2013-01-17 09:55:45.000000000 -0500
@@ -99,6 +99,11 @@
 if htmlOutput:
     print("<html><body><h1>"+sys.argv[1]+"</h1>")
 
+def header(msg):
+    return "\n" + ('='*40) + "\n" + msg + "\n" + ('='*40)
+
+def subTitle(msg):
+    return "\n" + msg + "\n" + ('-'*20)
 
 # search default is ascending mode
 sorttype=1
@@ -108,7 +113,31 @@
     for cveid in cveSearch:
         for item in collection.find({'id': cveid}).sort("last-modified",sorttype):
             if not namelookup:
-                print(item)
+                """
+                cpe:/o:microsoft:windows_server_2003::sp2:x64 
+                """
+                print(header(("CVE\t: " + item['id'])))
+                print("DATE\t: " + item['Published'])
+                print("CVSS\t: " + item['cvss'])
+                print(item['summary'])
+                ver = []
+                print(subTitle(("Vulnerable Configs:")))
+                for entry in item['vulnerable_configuration']:
+                    if not namelookup:
+                        #print (entry)
+                        ver.append(entry[7:])
+                        #todos = entry.split(':')
+                        #company = todos[2]
+                        #product = todos[3:]
+                        #print (company)
+                        #print (''.join(product))
+                    else:
+                        print(lookupcpe(cpeid=entry))
+                print ('\n'.join(x for x in sorted(ver)))
+                print(subTitle("References:"))
+                for entry in item['references']:
+                    print(entry)
+                print("\n\n")
             else:
                 if "vulnerable_configuration" in item:
                     vulconf = []
@@ -122,13 +151,74 @@
                     item['vulnerable_configuration'] = vulconf
                     if rankinglookup:
                         item['ranking'] = ranking
-                print(item)
+                print(header(("CVE\t: " + item['id'])))
+                print("DATE\t: " + item['Published'])
+                print("CVSS\t: " + item['cvss'])
+                print(item['summary'])
+                ver = []
+                print(subTitle(("Vulnerable Configs:")))
+                for entry in item['vulnerable_configuration']:
+                    if not namelookup:
+                        ver.append(entry[7:])
+                    else:
+                        print(lookupcpe(cpeid=entry))
+                print ('\n'.join(x for x in sorted(ver)))
+                print(subTitle("References:"))
+                for entry in item['references']:
+                    print(entry)
+                print("\n\n")
 
 # Basic freetext search (in vulnerability summary). 
 # todo2 : elaborate on freetext search and integrate with fancy output 
 if vFreeSearch:
     for item in collection.find({'summary': {'$regex' :  re.compile(vFreeSearch, re.IGNORECASE)}}).sort("last-modified",sorttype):
-        print(item)
+        if not namelookup:
+            print(header(("CVE\t: " + item['id'])))
+            print("DATE\t: " + item['Published'])
+            print("CVSS\t: " + item['cvss'])
+            print(item['summary'])
+            ver = []
+            print(subTitle(("Vulnerable Configs:")))
+            for entry in item['vulnerable_configuration']:
+                if not namelookup:
+                    ver.append(entry[7:])
+                else:
+                    print(lookupcpe(cpeid=entry))
+            print ('\n'.join(x for x in sorted(ver)))
+            print(subTitle("References:"))
+            for entry in item['references']:
+                print(entry)
+            print("\n\n")
+        else:
+            if "vulnerable_configuration" in item:
+                vulconf = []
+                ranking = []
+                for conf in item['vulnerable_configuration']:
+                    vulconf.append(lookupcpe(cpeid=conf))
+                    if rankinglookup:
+                        rank = findranking(cpe=conf)
+                        if rank and rank not in ranking:
+                            ranking.append(rank)
+                item['vulnerable_configuration'] = vulconf
+                if rankinglookup:
+                    item['ranking'] = ranking
+            print(header(("CVE\t: " + item['id'])))
+            print("DATE\t: " + item['Published'])
+            print("CVSS\t: " + item['cvss'])
+            print(item['summary'])
+            ver = []
+            print(subTitle(("Vulnerable Configs:")))
+            for entry in item['vulnerable_configuration']:
+                if not namelookup:
+                    ver.append(entry[7:])
+                else:
+                    print(lookupcpe(cpeid=entry))
+            print ('\n'.join(x for x in sorted(ver)))
+            print(subTitle("References:"))
+            for entry in item['references']:
+                print(entry)
+            print("\n\n")
+
 # Search Product (best to use CPE notation, e.g. cisco:ios:12.2
 if vSearch:
     for item in collection.find({"vulnerable_configuration": {'$regex' : vSearch}}).sort("last-modified",sorttype):
@@ -168,21 +258,21 @@
                 print(item)
         # plain text output, nothing fancy, just works.
         else:
-            print("CVE\t: " + item['id'])
+            print(header("CVE\t: " + item['id']))
             print("DATE\t: " + item['Published'])
             print("CVSS\t: " + item['cvss'])
             print(item['summary'])
-            print("\nReferences:")
-            print("-----------")
-            for entry in item['references']:
-                print(entry)
-            print("\nVulnerable Configs:")
-            print("-------------------")
+            print(subTitle("References:"))
+            ver = []
+            print(subTitle("Vulnerable Configs:"))
             for entry in item['vulnerable_configuration']:
                 if not namelookup:
-                    print(entry)
+                    ver.append(entry[7:])
                 else:
                     print(lookupcpe(cpeid=entry))
+            print ('\n'.join(x for x in sorted(ver)))
+            for entry in item['references']:
+                print(entry)
             print("\n\n")
 #close the html output properly
 if htmlOutput:
