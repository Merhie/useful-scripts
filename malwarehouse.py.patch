--- malwarehouse_orig.py	2012-09-27 13:30:14.184843700 -0400
+++ malwarehouse_ge.py	2012-11-07 09:03:48.195320400 -0500
@@ -1,40 +1,75 @@
 #!/usr/bin/env python
 # encoding: utf-8
+
 """
 malwarehouse.py
 
 Created by Scott Roberts.
 Copyright (c) 2012 TogaFoamParty Studios. All rights reserved.
+original version : https://github.com/sroberts/malwarehouse/
+"""
+
+"""
+To-do:
+- change location do doesn't have to create DB in desktop
+- batch processing mode (process directory as well as individual file)
+- incorporate other programs like peframe, YARA, sigcheck
+- add other columns to search like tags, file name etc.
+
+Changelog:
+09-26-12
+Glenn P. Edwards Jr.
+  @hiddenillusion
+http://hiddenillusion.blogspot.com
+- Added SSdeep support (if not present will just skip it)
+- Added an 'affiliation' option so IPs/Domains could be entered with the malware to record its affiliation (i.e. where it was downloaded from, its c2 etc.)
+- Added a 'cert' option so you could make a note of the digital signature/certificate it may be using (helpful if you want to point out a particular sample was using a stolen cert)
+- Added a 'delete' option to delete entries from the DB based on their sha256 hash.  If found, an attempt to delete its folder is also done since you no longer need the sample if you're deleting it from the DB (this could fail if it's RO!)
+- Added a 'parent' option so samples could be related to their original source (i.e. .class -> .jar, FWS extracted from CWS etc.).  I put the parent's sha256 here.
+- Added a 'source' option so you can note where you obtained the malicious file.  This differs from the affiliation as you might have received it from a friend, certain website like contagio or mailing list.
+- Added a 'filetype' option so you can make a note of the particular file type.  This helps later on if you want to grab samples of a particular file type because their file names may just be a hash and not include their actual file extension.
+- Changed the behavior for when the file already exists:
+	- If the sha256 dir already exists and the same filename is already inside, increment its name with a counter.  This means there will be separate entries/rows for each of the same files in the DB but they will have new timestamps and other metadata added so it can be observed when old files are re-added; but they will all be kept in the same folder.  This helps me see how many times I've seen a file and other new information I'm associating with it (i.e. - timestamp, affiliation, notes etc.)
+- Added a check so if the file's empty (based on an empty files hash) you are notified of it but it doesn't get processed since there's no need (useful to see if maybe your unzipping failed with the wrong password etc.)
+- Changed the way the results are displayed when searching for a file
 """
 
 import datetime
+import sys
 import os
 import hashlib
 import sqlite3
 import shutil
 import re
 from optparse import OptionParser
+try:
+    from ssdeep import ssdeep 
+    s = ssdeep()
+    fuzzy = True
+except ImportError:
+    print "[!] SSdeep module is missing"
+    fuzzy = False
 
-option_base_dir = os.path.expanduser("~/Desktop/malwarehouse/")
+option_base_dir = os.getcwd()
 
 def check_prelim():
   """Initial setup code. Eventually this will set options."""
-
-  db_path = option_base_dir + "malwarehouse.db"
+  global db_path
+  db_path = os.path.join(option_base_dir,"repo.db")
   dir_path = os.path.dirname(option_base_dir)
   
   if not os.path.exists(dir_path):
-    print "[ERROR] Base directory %s doesn't exist. Creating it..." % (dir_path)
+    print "[-] Base directory %s doesn't exist. Creating it..." % (dir_path)
     os.makedirs(dir_path)
 
   if not os.path.exists(db_path):
-    print "[ERROR] Database %s doesn't exist. Creating it..." % (db_path)
+    print "[-] Database %s doesn't exist. Creating it..." % (db_path)
     
     conn = sqlite3.connect(db_path)
     c = conn.cursor()
 
     # Create table
-    c.execute('''CREATE TABLE IF NOT EXISTS malwarehouse_index (datetime text, name text, tags text, size integer, md5 text, sha256 text, source text, notes text)''')
+    c.execute('''CREATE TABLE IF NOT EXISTS malwarehouse_index (datetime text, name text, tags text, size integer, md5 text, sha256 text, ssdeep text, source text, notes text, parent text, affiliation text, filetype text, cert text)''')
 
     # Save (commit) the changes
     conn.commit()
@@ -54,10 +89,31 @@
   
   return hashlib.sha256(file(malware_path, 'r').read()).hexdigest()
 
+def get_ssdeep(malware_path):
+  if not fuzzy == False:
+    return s.hash_file(malware_path)
+
 def summary(report_json):
   """Prints an easy to read summary of the malware."""
   
-  return "- %s (%s) - %s" % (report_json['name'], report_json['source'], report_json['md5'])
+  summary = ""
+  summary += "[-] %s\n" % (report_json['name'])
+  summary += "\tdatetime: %s\n" % (report_json['datetime'])
+  summary += "\ttags:     %s\n" % (report_json['tags'])
+  summary += "\tsize:     %s\n" % (report_json['size'])
+  summary += "\tmd5:      %s\n" % (report_json['md5'])
+  summary += "\tsha256:   %s\n" % (report_json['sha256'])
+  summary += "\tssdeep:   %s\n" % (report_json['ssdeep'])
+  summary += "\tfile type:   %s\n" % (report_json['filetype'])
+  summary += "\tsource:   %s\n" % (report_json['source'])
+  summary += "\taffiliation:   %s\n" % (report_json['affiliation'])
+  summary += "\tcert:   %s\n" % (report_json['cert'])
+  summary += "\tnotes:    %s\n" % (report_json["notes"])
+  summary += "\tparent:   %s\n" % (report_json["parent"])
+  summary += "\tsample directory: %s" % os.path.join(option_base_dir,report_json['sha256'])
+  summary += "\n"
+
+  return summary
 
 def details(report_json):
   """Prints an easy to read summary of the malware."""
@@ -69,21 +125,26 @@
   details += "size:     %s\n" % (report_json['size'])
   details += "md5:      %s\n" % (report_json['md5'])
   details += "sha256:   %s\n" % (report_json['sha256'])
+  details += "ssdeep:   %s\n" % (report_json['ssdeep'])
+  details += "file type:   %s\n" % (report_json['filetype'])
   details += "source:   %s\n" % (report_json['source'])
+  details += "affiliation:   %s\n" % (report_json['affiliation'])
+  details += "cert:   %s\n" % (report_json['cert'])
   details += "notes:    %s\n" % (report_json["notes"])
+  details += "parent:   %s\n" % (report_json["parent"])
+  details += "sample directory: %s" % os.path.join(option_base_dir,report_json['sha256'])
   details += "\n"
-  details += "sample directory: %s" % option_base_dir + report_json['sha256']
 
   return details
 
 def load_db(report_json):
   """Load information about the sample into the index DB."""
 
-  conn = sqlite3.connect(option_base_dir + "malwarehouse.db")
+  conn = sqlite3.connect(db_path)
   c = conn.cursor()
 
   # Insert a row of data 
-  c.execute("INSERT INTO malwarehouse_index VALUES (\"%s\", \"%s\", \"%s\", \"%d\", \"%s\", \"%s\", \"%s\", \"%s\")" % (report_json['datetime'], report_json['name'], report_json['tags'], report_json['size'], report_json['md5'], report_json['sha256'], report_json['source'], report_json['notes'])) 
+  c.execute("INSERT INTO malwarehouse_index VALUES (\"%s\", \"%s\", \"%s\", \"%d\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")" % (report_json['datetime'], report_json['name'], report_json['tags'], report_json['size'], report_json['md5'], report_json['sha256'], report_json['ssdeep'], report_json['filetype'], report_json['source'], report_json['affiliation'],  report_json['cert'], report_json['notes'], report_json['parent'])) 
   
   # Save (commit) the changes
   conn.commit()
@@ -91,20 +152,40 @@
   # We can also close the cursor if we are done with it
   c.close()
 
-  print "Sample %s loaded..." % report_json['name']
+  print "[+] Sample %s loaded..." % report_json['name']
   return True
 
-def load_directory(report_json, malware_path):
+def load_directory(report_json, malware_path, sample_dir, sfile):
   """Creates a directory to store the malware and summary."""
-  print "Loading Malware %s" % malware_path
-
-  sample_dir = "%s%s" % (option_base_dir, report_json['sha256'])
+  print "[+] Loading Malware \"%s\"" % malware_path
 
+  spath = os.path.join(sample_dir, malware_path)
   if not os.path.exists(sample_dir):
-    print "Creating %s" % (sample_dir)
+    print "[+] Creating %s" % (sample_dir)
     os.makedirs(sample_dir)
+  else:
+    print "[-] \"%s\" already exists in DB, adding to it's contents" % (os.path.basename(sample_dir))
+  
+  # If the file already exists in the output directory, increment its name
+  checker = os.path.join(sample_dir, sfile)
+  if os.path.exists(checker):
+    print("[-] Filename already exists in the DB's destination folder, incrementing it's name")
+    ofile = os.path.abspath(malware_path)
+    ndir = os.path.dirname(ofile)
+    ext = os.path.splitext(sfile)[1]
+
+    count = 1
+    while os.path.exists(spath):
+      count += 1
+      cfile = ofile + '.' + str(count)
+      spath = os.path.join(sample_dir, os.path.basename(cfile))
+      continue
+      
+    os.rename(ofile, cfile)
+    shutil.move(cfile, sample_dir)
 
-  shutil.move(malware_path, sample_dir)
+  else:
+      shutil.move(malware_path, sample_dir)
 
   with open(sample_dir + '/summary.txt', 'w') as text_file:
     text_file.write(details(report_json))
@@ -113,36 +194,68 @@
 
 def malware_loader(report_json, malware_path):
   load_db(report_json)
-  load_directory(report_json, malware_path)
+  sample_dir = os.path.join(option_base_dir,report_json['sha256'])
+  sfile = os.path.basename(malware_path)
+  sha256 = os.path.basename(sample_dir)
+  empty = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
+  if sha256 == empty:
+    print "[!] \"%s\" is empty...not adding it to DB (unzip fail?)" % sfile
+  else:
+    load_directory(report_json, malware_path, sample_dir, sfile)
 
 def find_sample(find_string):
     
-    conn = sqlite3.connect(option_base_dir + "malwarehouse.db")
+    conn = sqlite3.connect(db_path)
     c = conn.cursor()
     
     if re.findall(r"^([a-fA-F\d]{64})$", find_string):
-        #print "\nResults for sha256: %s" % find_string
         c.execute("SELECT * FROM malwarehouse_index WHERE sha256 = ?", (find_string,))
     elif re.findall(r"^([a-fA-F\d]{32})$", find_string):
-        #print "\nResults for md5: %s" % find_string
         c.execute("SELECT * FROM malwarehouse_index WHERE md5 = ?", (find_string,))
     else:
-        #print "\nResults for file name: %s" % find_string
-        c.execute("SELECT * FROM malwarehouse_index WHERE name = ?", (find_string,))
+        c.execute("SELECT * FROM malwarehouse_index WHERE notes like ?", (find_string,))
 
     data=c.fetchall()
-    
-    if data is None:
-        print('There is no component named %s'%find_string)
+    if not data:
+        print('Nothing found with \"%s\"'%find_string)
         return False
     else:
         print "\nResults:"
         for result in data:
-            print summary({'datetime': result[0], 'name': result[1], 'tags':result[2], 'size': result[3], 'md5': result[4], 'sha256': result[5], 'source': result[6], 'notes': result[7]})
+            print summary({'datetime': result[0], 'name': result[1], 'tags':result[2], 'size': result[3], 'md5': result[4], 'sha256': result[5], 'ssdeep': result[6], 'filetype': result[7], 'source': result[8], 'affiliation': result[9], 'cert': result[10], 'notes': result[11], 'parent': result[12]})
+        return True
+
+def del_sample(find_string):
+    
+    conn = sqlite3.connect(db_path)
+    c = conn.cursor()
+    
+    if re.findall(r"^([a-fA-F\d]{64})$", find_string):
+        c.execute("SELECT * FROM malwarehouse_index WHERE sha256 = ?", (find_string,))
+    data=c.fetchall()
+    
+    if not data:
+        print('Nothing found with \"%s\"'%find_string)
+        return False
+    else:
+        print "\nDeleted entries:"
+        for result in data:
+            print summary({'datetime': result[0], 'name': result[1], 'tags':result[2], 'size': result[3], 'md5': result[4], 'sha256': result[5], 'ssdeep': result[6], 'filetype': result[7], 'source': result[8], 'affiliation': result[9], 'cert': result[10], 'notes': result[11], 'parent': result[12]})
+
+        c.execute("DELETE FROM malwarehouse_index WHERE sha256 = ?", (find_string,))
+        # need to try and delete the folder holding what's being deleted
+        try:
+            entry = os.path.join(os.path.dirname(db_path), find_string)
+            shutil.rmtree(entry)
+        except Exception, msg:
+            print "[!] %s" % msg
+
+        conn.commit()
+        c.close()
         return True
 
 def recent(quanity='5'):
-    conn = sqlite3.connect(option_base_dir + "malwarehouse.db")
+    conn = sqlite3.connect(db_path)
     c = conn.cursor()
 
     try:
@@ -155,13 +268,13 @@
 
     print "\n%s Most Recent Samples:" % quanity
     for result in data:
-        print summary({'datetime': result[0], 'name': result[1], 'tags':result[2], 'size': result[3], 'md5': result[4], 'sha256': result[5], 'source': result[6], 'notes': result[7]})
+            print summary({'datetime': result[0], 'name': result[1], 'tags':result[2], 'size': result[3], 'md5': result[4], 'sha256': result[5], 'ssdeep': result[6], 'filetype': result[7], 'source': result[8], 'affiliation': result[9], 'cert': result[10], 'notes': result[11], 'parent': result[12]})
 
     return True
 
 def main():
     if not check_prelim():
-      print "[ERROR] Initial setup unable to complete. Exiting..."
+      print "[!] Error: Initial setup unable to complete. Exiting..."
       return False
 
     malware_definition = {
@@ -171,45 +284,85 @@
         "size": "", #calculated
         "md5": "", #calculated
         "sha256": "", #calculated
+        "ssdeep": "", #calculated
+        "filetype": "",
         "source": "",
+        "affiliation": "",
+        "cert": "",
         "notes": "",
+        "parent": "",
     }
 
-    parser = OptionParser(usage="usage: %prog [options] filepath", version="%prog 0.1")
-    parser.add_option("-s", "--source",
+    parser = OptionParser(usage="usage: %prog [options] filepath", version="%prog 0.2")
+    parser.add_option("-a", "--affiliation",
                       action="store",
                       type="string",
-                      dest="SOURCE",
+                      dest="AFFILIATION",
                       default=None,
-                      help="Source of file")
-    parser.add_option("-t", "--tags",
+                      help="IPs/Domains affiliation with the malware")
+    parser.add_option("-c", "--cert",
                       action="store",
                       type="string",
-                      dest="TAGS",
-                      default="No tags",
-                      help="Any characteristics of the malware")
+                      dest="CERT",
+                      default="",
+                      help="Digital Certificate")
+    parser.add_option("-d", "--delete",
+                      action="store",
+                      type="string",
+                      dest="DELETE",
+                      default=None,
+                      help="Deletes DB entries by their sha256 hash - ! Use with caution !")
+    parser.add_option("-f", "--find",
+                      action="store",
+                      type="string",
+                      dest="FIND",
+                      default="",
+                      help="Find a sample by name, md5, or sha256")
     parser.add_option("-n", "--notes",
                       action="store",
                       type="string",
                       dest="NOTES",
                       default="",
                       help="Notes about file")
-    parser.add_option("-f", "--find",
+    parser.add_option("-p", "--parent",
                       action="store",
                       type="string",
-                      dest="FIND",
+                      dest="PARENT",
                       default="",
-                      help="Find a sample by name, md5, or sha256")
+                      help="Parent file where this file relates to or was embedded in")
     parser.add_option("-r", "--recent",
                       action="store",
                       type="string",
                       dest="QUANTITY",
                       default="",
                       help="Find the most recent # samples")
+    parser.add_option("-s", "--source",
+                      action="store",
+                      type="string",
+                      dest="SOURCE",
+                      default="",
+                      help="Source of file")
+    parser.add_option("-t", "--tags",
+                      action="store",
+                      type="string",
+                      dest="TAGS",
+                      default="",
+                      help="Any characteristics of the malware")
+    parser.add_option("-T", "--type",
+                      action="store",
+                      type="string",
+                      dest="FILETYPE",
+                      default="",
+                      help="File type")
     
     (options, args) = parser.parse_args()
 
-    if options.QUANTITY:
+    if options.DELETE:
+      if del_sample(options.DELETE):
+        return True
+      else:
+        return False
+    elif options.QUANTITY:
         if recent(options.QUANTITY):
             return True
         else:
@@ -237,16 +390,21 @@
     if options.SOURCE: malware_definition["source"] = options.SOURCE
     if options.TAGS: malware_definition["tags"] = options.TAGS
     if options.NOTES: malware_definition["notes"] = options.NOTES
+    if options.PARENT: malware_definition["parent"] = options.PARENT
+    if options.AFFILIATION: malware_definition["affiliation"] = options.AFFILIATION
+    if options.FILETYPE: malware_definition["filetype"] = options.FILETYPE
+    if options.CERT: malware_definition["cert"] = options.CERT
 
     #Parsing Automatically Generated Options
-    print "Parsing Malware"
+    print "[+] Parsing Malware"
     malware_definition["name"] = malware_filename
     malware_definition["datetime"] = str(datetime.datetime.now())
     malware_definition["size"] = os.stat(malware_path).st_size
     malware_definition["md5"] = get_md5(malware_path)
     malware_definition["sha256"] = get_sha256(malware_path) 
+    malware_definition["ssdeep"] = get_ssdeep(malware_path) 
 
-    print "Analysis complete. Loading."
+    print "[+] Analysis complete. Loading."
     malware_loader(malware_definition, malware_path)
 
     return True
@@ -258,6 +416,3 @@
         print "User aborted."
     except SystemExit:
         pass
-    #except:
-        #SystemExit
-
